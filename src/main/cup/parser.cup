package lyc.compiler;

import java_cup.runtime.*;

class Parser;


// Terminals
terminal ASSIG;
terminal COLON;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal GREATER;
terminal LESSER;
terminal GREATER_EQ;
terminal LESSER_EQ;
terminal EQUAL;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal OPEN_CURLY_BRACKET;
terminal CLOSE_CURLY_BRACKET;
terminal INTEGER_CONSTANT;
terminal STRING_CONSTANT;
terminal FLOAT_CONSTANT;
terminal IDENTIFIER;
terminal COMA;
terminal CYCLE; // palabra reservada "ciclo"
terminal IF; // palabra reservada "if"
terminal ELSE; //palabra reservada "else"
terminal RESERVED_FLOAT; //palabra reservada "Float"
terminal RESERVED_INT; //palabra reservada "Int"
terminal RESERVED_STRING; //palabra reservada "String"
terminal INIT;
terminal WRITE;
terminal READ;
terminal AND;
terminal OR;
terminal NOT;


// Non Terminals
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal initRule;
non terminal initBlock;
non terminal cycle;
non terminal list;
non terminal type;
non terminal initSentence;
non terminal block;
non terminal cycleCondition;
non terminal cycleBlock;
non terminal trueBlock;
non terminal elseBlock;
non terminal optional;
non terminal operator;
non terminal conditionElement;
non terminal conditional;
non terminal condition;
non terminal selection;
non terminal read;
non terminal write;

// Start Symbol Definition
start with sentence;


/*

<SENTENCE> -> <INIT>
<INIT> -> INIT OPEN_CURLY <INIT_BLOCK> CLOSE_CURLY
<INIT_BLOCK> -> <INIT_BLOCK> <INIT_SENTENCE>
<INIT_BLOCK> -> <INIT_SENTENCE>
<INIT_SENTENCE> -> <LIST> COLON <TYPE>
<LIST> -> <LIST> COMA ID
<TYPE> -> INT
<TYPE> -> FLOAT
<TYPE> -> STRING

*/

// INIT

sentence ::= initRule {::};
initRule ::= INIT OPEN_CURLY_BRACKET initBlock CLOSE_CURLY_BRACKET {::};
initBlock ::= initBlock initSentence {::};
initBlock ::= initSentence {::};
initSentence ::= list COLON type {::};
list ::= list COMA IDENTIFIER {::};
type ::= INTEGER_CONSTANT {::};
type ::= FLOAT_CONSTANT {::};
type ::= STRING_CONSTANT {::};

block ::= block sentence {::};
block ::= sentence {::};

// CYCLE

sentence ::= cycle {::};
cycle ::= cycleCondition cycleBlock {::};
cycleCondition ::= OPEN_BRACKET condition CLOSE_BRACKET {::};
cycleBlock ::= OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET {::};

// IF

sentence ::= selection {::};
selection ::= trueBlock elseBlock {::};
selection ::= trueBlock {::};
trueBlock ::= conditional OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET;
elseBlock ::= ELSE OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET {::};
conditional ::= IF OPEN_BRACKET condition CLOSE_BRACKET {::};
condition ::= NOT conditionElement {::};
condition ::= conditionElement optional conditionElement {::};
condition ::= conditionElement {::};
conditionElement ::= factor operator factor {::};

// Logic Operators

optional ::= AND {::};
optional ::= OR {::};
operator ::= EQUAL {::};
operator ::= GREATER {::};
operator ::= GREATER_EQ {::};
operator ::= LESSER {::};
operator ::= LESSER_EQ {::};

sentence ::= read {::};
read ::= READ OPEN_BRACKET IDENTIFIER CLOSE_BRACKET {::};
sentence ::= write;
write ::= WRITE OPEN_BRACKET factor CLOSE_BRACKET {: System.out.print("WRITE"); :};
factor ::= IDENTIFIER:identifier;
factor ::= INTEGER_CONSTANT:constant;
factor ::= FLOAT_CONSTANT:constant;
factor ::= expression;

/* ARITMETIC EXPRESSION */
sentence ::= assignment {: System.out.println("End"); :};
assignment ::= IDENTIFIER ASSIG expression {: System.out.println("Assignment"); :};
expression ::= expression PLUS term {: System.out.println("+"); :};
expression ::= expression SUB term {: System.out.println("-"); :};
expression ::= term {: System.out.println("Expression = Term"); :};
term ::= term MULT factor {: System.out.println("*"); :};
term ::= term DIV factor {: System.out.println("/"); :};
term ::= factor {: System.out.println("Term = factor"); :};
factor ::= IDENTIFIER:identifier  {: System.out.println("Id: " + identifier); :};
factor ::= INTEGER_CONSTANT:constant {: System.out.println("Constant: " + constant ); :};
factor ::= FLOAT_CONSTANT:constant {: System.out.println("Constant: " + constant ); :};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("Factor = (Expression)"); :};

/*  */