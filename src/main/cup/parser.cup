package lyc.compiler;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Stack;
import SymbolTableGenerator.DataType;
import SymbolTableGenerator.SymbolEntry;
import SymbolTableGenerator.SymbolTableManager;
import Tercetos.Terceto;
import Tercetos.TercetoManager;

class Parser;

action code {:
    private boolean debug = true;
    private int SentenceIndex = 0;
    private int AssignmentIndex = 0;
    private int ExpressionIndex = 0;
    private int TermIndex = 0;
    private int FactorIndex = 0;
    private int InitRuleIndex = 0;
    private int InitBlockIndex = 0;
    private int CycleIndex = 0;
    private int ListIndex = 0;
    private int TypeIndex = 0;
    private int InitSentenceIndex = 0;
    private int BlockIndex = 0;
    private int ThenBlockIndex = 0;
    private int NextBlockIndex = 0;
    private int CycleConditionIndex = 0;
    private int CycleBlockIndex = 0;
    private int TrueBlockIndex = 0;
    private int ElseBlockIndex = 0;
    private int OptionalIndex = 0;
    private int OperatorIndex = 0;
    private int ConditionElementIndex = 0;
    private int ConditionIndex = 0;
    private int SelectionIndex = 0;
    private int ReadIndex = 0;
    private int WriteIndex = 0;
    private int ConcatParamsIndex = 0;
    private int ConcatSentenceIndex = 0;
    private int NonTerminalIndex = 0;
    private int LeftSideExpressionIndex = 0;
    private int BranchIndex = 0;
    private int RightBranchIndex = 0;
    private int LeftBranchIndex = 0;

    private String BranchOperator = null;
    private String BranchOppositeOperator = null;
    private String ConcatOperator = null;

    private String LeftConcatString = null;
    private String RightConcatString = null;
    private int ConcatIndex;
    private int ConcatTercetoIndex;

    private ArrayList<Terceto> tercetos = TercetoManager.tercetos;
    private HashMap<String, SymbolEntry> symbolTable = SymbolTableManager.symbolTable;
    private ArrayList<String> VariableList = new ArrayList<String>();

    private DataType LeftSideType = null;
    private DataType RightSideType = null;
    private DataType VariableType = null;
    private DataType FactorType = null;
    private DataType TermType = null;
    private DataType ExpressionType = null;

    private String ConcatFirstString = null;
    private String ConcatSecondString = null;

    private Stack<Integer> stack = new Stack<Integer>();
:};

// Terminals
terminal ASSIG;
terminal COLON;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal GREATER;
terminal LESSER;
terminal GREATER_EQ;
terminal LESSER_EQ;
terminal EQUAL;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal OPEN_CURLY_BRACKET;
terminal CLOSE_CURLY_BRACKET;
terminal INTEGER_CONSTANT;
terminal STRING_CONSTANT;
terminal FLOAT_CONSTANT;
terminal IDENTIFIER;
terminal COMA;
terminal CYCLE; // palabra reservada "ciclo"
terminal IF; // palabra reservada "if"
terminal ELSE; //palabra reservada "else"
terminal RESERVED_FLOAT; //palabra reservada "Float"
terminal RESERVED_INT; //palabra reservada "Int"
terminal RESERVED_STRING; //palabra reservada "String"
terminal RESERVED_CONCAT; //palabra reservada "ConcatenarConRecorte"
terminal INIT;
terminal WRITE;
terminal READ;
terminal AND;
terminal OR;
terminal NOT;


// Non Terminals
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal initRule;
non terminal initBlock;
non terminal cycle;
non terminal list;
non terminal type;
non terminal initSentence;
non terminal block;
non terminal cycleCondition;
non terminal cycleBlock;
non terminal trueBlock;
non terminal elseBlock;
non terminal logicalConcat;
non terminal logicalOperator;
non terminal conditionElement;
non terminal condition;
non terminal selection;
non terminal read;
non terminal write;
non terminal concatParam;
non terminal concatSentence;
non terminal concatIndexParam;

non terminal program;

// Start Symbol Definition
start with program;

// INIT

program ::= block;
block ::= block sentence {::};
block ::= sentence {::};

// CONCATENAR CON RECORTE
/**

    private String ConcatFirstString = null;
    private String ConcatSecondString = null;
    private Integer ConcatIndex = null;
    **/
sentence ::= concatSentence {::};
concatSentence ::= RESERVED_CONCAT OPEN_BRACKET concatParam COMA concatParam COMA INTEGER_CONSTANT:cte CLOSE_BRACKET {:
                    Integer ConcatIndex = Integer.valueOf(cte.toString());
                    String str1 = SymbolTableManager.getValue(LeftConcatString);
                    str1 = str1.replaceAll("\"","").substring(ConcatIndex);
                    String str2 = SymbolTableManager.getValue(RightConcatString);
                    str2 = str2.replaceAll("\"","").substring(ConcatIndex);
                    String result = str1 + str2;
                    ConcatTercetoIndex = TercetoManager.crearTerceto(result, "_", "_");
                :};
concatParam ::= IDENTIFIER:id {:
                if(SymbolTableManager.getType(id.toString()) != DataType.STRING_TYPE) {
                    System.out.println("Error, se esperaba un string como parametro para recorte");
                    System.exit(1);
                }
                if(LeftConcatString == null) {
                    LeftConcatString = id.toString();
                 }
                else if(RightConcatString == null) {
                    RightConcatString = id.toString();
                }
        :};
concatParam ::= STRING_CONSTANT:cte {:
                if(LeftConcatString == null) {
                    LeftConcatString = cte.toString();
                }
                else if(RightConcatString == null) {
                    RightConcatString = cte.toString();
                }
            :};

// IINIT

sentence ::= initRule {::};
initRule ::= INIT OPEN_CURLY_BRACKET initBlock CLOSE_CURLY_BRACKET {:System.out.println("INIT RULE");:};
initBlock ::= initBlock initSentence {::};
initBlock ::= initSentence {::};
initSentence ::= list COLON type {:
    if (debug) {
        System.out.println("Declaracion de variables");
    }

    for(String variable : VariableList) {
        SymbolTableManager.setDataType(variable, VariableType);
    }
    VariableList = new ArrayList<String>();
:};
list ::= list COMA IDENTIFIER:id {:
    VariableList.add(id.toString());
:};
list ::= IDENTIFIER:id {:
    VariableList.add(id.toString());
:};
type ::= RESERVED_INT:id {:
    VariableType = DataType.INTEGER_TYPE;
:};
type ::= RESERVED_FLOAT:id {:
    VariableType = DataType.FLOAT_TYPE;
:};
type ::= RESERVED_STRING {:
    VariableType = DataType.STRING_TYPE;
:};

// CYCLE

sentence ::= cycle {::};
cycle ::= CYCLE OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET {::};


/* TODO

Despues de CYCLE o OPEN_BRACKET guardar la cantidad de tercetos en una variable CycleStartIndex
que va a tener tercetos size + 1

Despues de condition crear un terceto con el salto al inicio de la condition

*/

//cycleCondition ::= OPEN_BRACKET condition CLOSE_BRACKET {::};
//cycleBlock ::= OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET {::};

// IF

sentence ::= selection {::};
selection ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET {:
        Integer tercetosSize = TercetoManager.getTercetosSize();
        NextBlockIndex = tercetosSize;
        BranchIndex = stack.pop();
        TercetoManager.modificarSalto(BranchIndex, "[" + NextBlockIndex + "]");
    :};
selection ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET ELSE {:

        Integer inconditionalBranchIndex = TercetoManager.crearTerceto("BI", "_");

        Integer tercetosSize = TercetoManager.getTercetosSize();
        ElseBlockIndex = tercetosSize;
        BranchIndex = stack.pop();
        TercetoManager.modificarSalto(BranchIndex, "[" + ElseBlockIndex + "]");

        stack.push(inconditionalBranchIndex);
    :}
    OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET {:
        Integer tercetosSize = TercetoManager.getTercetosSize();
        NextBlockIndex = tercetosSize;
        Integer inconditionalBranchIndex = stack.pop();

        TercetoManager.modificarSalto(inconditionalBranchIndex, "[" + NextBlockIndex + "]");
    :};
condition ::= NOT conditionElement {: TercetoManager.modificarOperador(BranchIndex, BranchOperator); stack.push(BranchIndex); :};
condition ::= conditionElement logicalConcat {:
                 LeftBranchIndex = BranchIndex;
                 if(ConcatOperator == "OR"){
                    TercetoManager.modificarOperador(LeftBranchIndex, BranchOperator);
                 }
            :} conditionElement {:
                Integer tercetosSize = TercetoManager.getTercetosSize();
                ThenBlockIndex = tercetosSize;
                RightBranchIndex = BranchIndex;
                if(ConcatOperator == "OR") {
                    TercetoManager.modificarSalto(LeftBranchIndex, "[" + ThenBlockIndex + "]");
                    stack.push(RightBranchIndex);
                }
                else if(ConcatOperator == "AND") {
                    stack.push(LeftBranchIndex);
                    stack.push(RightBranchIndex);
                }
            :};
condition ::= conditionElement {: stack.push(BranchIndex); :};
conditionElement ::= expression {: LeftSideExpressionIndex = ExpressionIndex; LeftSideType = ExpressionType;:}
    logicalOperator expression {:
        RightSideType = ExpressionType;
        if(LeftSideType != RightSideType) {
            System.out.println("Cannot compare " + LeftSideType.getName() + " to " + RightSideType.getName());
            System.exit(1);
        }
        ConditionElementIndex = TercetoManager.crearTerceto("CMP", "[" + LeftSideExpressionIndex + "]", "[" + ExpressionIndex + "]");
        BranchIndex = TercetoManager.crearTerceto(BranchOppositeOperator, "_");
    :};

// Logic Operators

logicalConcat ::= AND {: ConcatOperator = "AND"; :};
logicalConcat ::= OR {: ConcatOperator = "OR"; :};
logicalOperator ::= EQUAL {: BranchOperator = "BE"; BranchOppositeOperator = "BNE"; :};
logicalOperator ::= GREATER {: BranchOperator = "BGT"; BranchOppositeOperator = "BLE"; :};
logicalOperator ::= GREATER_EQ {:BranchOperator = "BGE"; BranchOppositeOperator = "BLT"; :};
logicalOperator ::= LESSER {: BranchOperator = "BLT"; BranchOppositeOperator = "BGE"; :};
logicalOperator ::= LESSER_EQ {: BranchOperator = "BLE"; BranchOppositeOperator = "BGT"; :};


sentence ::= read {::};
read ::= READ OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET {: TercetoManager.crearTerceto("WRITE", id.toString(), "_"); :};
read ::= READ OPEN_BRACKET STRING_CONSTANT:cteStr CLOSE_BRACKET {: TercetoManager.crearTerceto("WRITE", cteStr.toString(), "_"); :};


sentence ::= write;
write ::= WRITE OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET {: TercetoManager.crearTerceto("WRITE", id.toString(), "_"); :};
write ::= WRITE OPEN_BRACKET STRING_CONSTANT:cteStr CLOSE_BRACKET {: TercetoManager.crearTerceto("WRITE", cteStr.toString(), "_"); :};


/* ARITMETIC EXPRESSION */
sentence ::= assignment {: if (debug) { System.out.println("<sentencia finalizada>"); } :};
assignment ::= IDENTIFIER:id ASSIG expression {:
    if (debug) {
        System.out.println("Assignment");
        System.out.println(id.toString());
    }

    DataType idType = SymbolTableManager.getType(id.toString());

    if (idType == null) {
        System.out.println("Error: Se intento usar el id \"" + id.toString() + "\" sin declarar en el init");
        System.exit(1);
    }

    if (idType != ExpressionType) {
        System.out.println("Cannot assign " + ExpressionType.getName() + " to " + idType.getName());
        System.exit(1);
    }

    AssignmentIndex = TercetoManager.crearTerceto("=", id.toString(), "[" + ExpressionIndex + "]");
:};
assignment ::= IDENTIFIER:id ASSIG STRING_CONSTANT:str {:
    if (debug) {
        System.out.println("Assignment");
    }

    AssignmentIndex = TercetoManager.crearTerceto("=", id.toString(), str.toString());

    DataType type = SymbolTableManager.getType(id.toString());
    if (type != DataType.STRING_TYPE) {
        System.out.println("Error: Asignacion de variable " + id.toString());
        System.exit(1);
    }

    SymbolTableManager.setValue(id.toString(), str.toString());
    SymbolTableManager.setLength(id.toString(), Integer.toString(str.toString().length()));

:};
assignment ::= IDENTIFIER:id ASSIG concatSentence {: TercetoManager.crearTerceto("=", id.toString(), "[" + ConcatTercetoIndex + "]"); :};
expression ::= expression PLUS term {:
    if (debug) {
        System.out.println("+");
        System.out.println(ExpressionType);
        System.out.println(TermType);
    }

    if (ExpressionType == DataType.FLOAT_TYPE || TermType == DataType.FLOAT_TYPE) {
        ExpressionType = DataType.FLOAT_TYPE;
    } else {
         ExpressionType = DataType.INTEGER_TYPE;
     }

    ExpressionIndex = TercetoManager.crearTerceto("+", "[" + ExpressionIndex + "]", "[" + TermIndex + "]");
:};
expression ::= expression SUB term {:
    if (debug) {
        System.out.println("-");
        System.out.println(ExpressionType);
        System.out.println(TermType);
    }

    if (ExpressionType == DataType.FLOAT_TYPE || TermType == DataType.FLOAT_TYPE) {
        ExpressionType = DataType.FLOAT_TYPE;
    }

    ExpressionIndex = TercetoManager.crearTerceto("-", "[" + ExpressionIndex + "]", "[" + TermIndex + "]");
:};
expression ::= term {:
     if (debug) {
        System.out.println("Expression = Term");
     }

     ExpressionType = TermType;
     ExpressionIndex = TermIndex;
:};
term ::= term MULT factor {:
    if (debug) {
        System.out.println("*");
    }

    if(TermType == DataType.FLOAT_TYPE || FactorType == DataType.FLOAT_TYPE) {
        TermType = DataType.FLOAT_TYPE;
    }

    TermIndex = TercetoManager.crearTerceto("*", "[" + TermIndex + "]", "[" + FactorIndex + "]");
:};
term ::= term DIV factor {:
    if (debug) {
        System.out.println("/");
    }

    if(TermType == DataType.FLOAT_TYPE || FactorType == DataType.FLOAT_TYPE) {
        TermType = DataType.FLOAT_TYPE;
    }

    TermIndex = TercetoManager.crearTerceto("/", "[" + TermIndex + "]", "[" + FactorIndex + "]");
:};
term ::= factor {:
    if (debug) {
        System.out.println("Term = factor");
    }

    TermIndex = FactorIndex;
    TermType = FactorType;
:};
factor ::= IDENTIFIER:identifier  {:
    if (debug) {
        System.out.println("Id: \"" + identifier + "\" reduced as a factor");
    }
    FactorIndex = TercetoManager.crearTerceto(identifier.toString());
    FactorType = SymbolTableManager.getType(identifier.toString());
    System.out.println("DEBUG:"+FactorType+ "    "+identifier+ "     " + identifier.toString());
:};
factor ::= INTEGER_CONSTANT:constant {:
    if (debug) {
        System.out.println("Integer constant: " + constant + " as a factor");
    }

    FactorIndex = TercetoManager.crearTerceto("_"+constant.toString());
    FactorType = DataType.INTEGER_TYPE;
:};
factor ::= FLOAT_CONSTANT:constant {:
    if (debug) {
        System.out.println("Float constant: " + constant + " as a factor");
    }
    FactorIndex = TercetoManager.crearTerceto("_"+constant.toString());
    FactorType = DataType.FLOAT_TYPE;
:};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET {:
    if (debug) {
        System.out.println("Factor = (Expression)");
        System.out.println(ExpressionType);

        System.out.println(FactorType);
    }

    FactorIndex = ExpressionIndex;
    FactorType = ExpressionType;
:};

/*  */