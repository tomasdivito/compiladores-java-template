package lyc.compiler;

import java_cup.runtime.*;

class Parser;


// Terminals
terminal ASSIG;
terminal COLON;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal GREATER;
terminal LESSER;
terminal GREATER_EQ;
terminal LESSER_EQ;
terminal EQUAL;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal OPEN_CURLY_BRACKET;
terminal CLOSE_CURLY_BRACKET;
terminal INTEGER_CONSTANT;
terminal STRING_CONSTANT;
terminal FLOAT_CONSTANT;
terminal IDENTIFIER;
terminal COMA;
terminal CYCLE; // palabra reservada "ciclo"
terminal CONDITIONAL; // palabra reservada "if"
terminal OPTION; //palabra reservada "else"
terminal RESERVED_FLOAT; //palabra reservada "Float"
terminal RESERVED_INT; //palabra reservada "Int"
terminal RESERVED_STRING; //palabra reservada "String"
terminal INIT;
terminal WRITE;
terminal READ;
terminal AND;
terminal OR;
terminal NOT;


// Non Terminals
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;

// Start Symbol Definition
start with sentence;



/* WRITE */
sentence ::= WRITE OPEN_BRACKET content CLOSE_BRACKET {: System.out.print("WRITE"); :};
content ::= ID;
content ::= INTEGER_CONSTANT;
content ::= FLOAT_CONSTANT;
content ::= expression;

/* ARITMETIC EXPRESSION */
sentence ::= assignment {: System.out.println("End"); :};
assignment ::= IDENTIFIER ASSIG expression {: System.out.println("Assignment"); :};
expression ::= expression PLUS term {: System.out.println("+"); :};
expression ::= expression SUB term {: System.out.println("-"); :};
expression ::= term {: System.out.println("Expression = Term"); :};
term ::= term MULT factor {: System.out.println("*"); :};
term ::= term DIV factor {: System.out.println("/"); :};
term ::= factor {: System.out.println("Term = factor"); :};
factor ::= IDENTIFIER:id  {: System.out.println("Id: " + id); :};
factor ::= INTEGER_CONSTANT:constant {: System.out.println("Constant: " + constant ); :};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("Factor = (Expression)"); :};

/*  */